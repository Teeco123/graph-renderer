
#version 330

#define MAX_POINTS 200

uniform vec2 points[MAX_POINTS]; // Array of point positions
uniform int numPoints;           // Number of points
uniform float radius;            // Influence radius
uniform vec2 resolution;         // Screen resolution

out vec4 fragColor;

// GLSL equivalent of SmoothingKernel
float SmoothingKernel(float radius, float dst) {
    float volume = 3.14159265359 * pow(radius, 8.0) / 4.0;
    float squared = radius * radius - dst * dst;
    float value = (squared > 0.0) ? squared : 0.0;
    
    return (value * value * value) / volume;
}

// GLSL equivalent of Distance2Vectors
float Distance2Vectors(vec2 A, vec2 B) {
    return length(A - B);
}

// GLSL equivalent of CalculateDensity
float CalculateDensity(vec2 samplePoint) {
    float density = 0.0;
    const float mass = 1.0;

    for (int i = 0; i < numPoints; i++) {
        vec2 normalizedPoint = points[i] / resolution;
        float normalizedRadius = radius / resolution.x; // Adjust for aspect ratio if needed

        float dst = Distance2Vectors(samplePoint, normalizedPoint);
        float influence = SmoothingKernel(normalizedRadius, dst);
        density += mass * influence;
    }

    return density;
}

vec4 DensityToColor(float density) {
    vec3 lowDensity = vec3(0.0, 1.0, 1.0);
    vec3 highDensity = vec3(1.0, 0.0, 0.0);

    float normalizedDensity = clamp(density / 500, 0.0, 1.0);

    vec3 color = mix(lowDensity, highDensity, normalizedDensity);

    return vec4(color, 1.0);
}

vec2 flipUVVertically(vec2 uv) {
    uv.y = 1.0 - uv.y;
    return uv;
}

void main() {
    vec2 uv = gl_FragCoord.xy / (resolution * 2);
    vec2 flipped = flipUVVertically(uv);
    float density = CalculateDensity(flipped);
    vec4 color = DensityToColor(density);
    fragColor = color;
}


